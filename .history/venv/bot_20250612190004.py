import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

ADMIN_ID = [572979988 ,103525470]
TOKEN = "7366253745:AAEGD7nh93tBAg-g70ZDXlpyRnEaT_xXLkk"
DATA_FILE = "questions.json"

admin_keyboard = [
    ["üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
    ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
    ["üìä –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
]

cancel_keyboard = [["üîô –û—Ç–º–µ–Ω–∞"]]

def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    reply_markup = ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True)
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["step"] = 0
    context.user_data["answers"] = {}
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    step = context.user_data.get("step", 0)
    if step >= len(data["questions"]):
        data.setdefault("answers", {})[str(update.effective_user.id)] = context.user_data["answers"]
        save_data(data)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        return

    q = data["questions"][step]
    keyboard = [[opt] for opt in q["options"]] + [["üîô –û—Ç–º–µ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(q["text"], reply_markup=markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text.lower() in ["–æ—Ç–º–µ–Ω–∞", "üîô –æ—Ç–º–µ–Ω–∞", "üîô"]:
        context.user_data.clear()
        reply_markup = ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True) if user_id == ADMIN_ID else None
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_markup)
        return

    data = load_data()

    if user_id == ADMIN_ID:
        if context.user_data.get("admin_action") == "add_question":
            context.user_data["new_q_text"] = text
            context.user_data["admin_action"] = "add_options"
            await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            return
        elif context.user_data.get("admin_action") == "add_options":
            options = [opt.strip() for opt in text.split(",")]
            new_question = {
                "id": len(data["questions"]) + 1,
                "text": context.user_data["new_q_text"],
                "options": options
            }
            data["questions"].append(new_question)
            save_data(data)
            context.user_data.clear()
            await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
            return
        elif context.user_data.get("admin_action") == "delete_question":
            try:
                q_id = int(text)
                data["questions"] = [q for q in data["questions"] if q["id"] != q_id]
                for i, q in enumerate(data["questions"], start=1):
                    q["id"] = i
                save_data(data)
                await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.")
            except:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            context.user_data.clear()
            await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
            return
        elif context.user_data.get("admin_action") == "edit_question":
            try:
                q_id = int(text)
                context.user_data["edit_id"] = q_id
                context.user_data["admin_action"] = "edit_text"
                await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            except:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return
        elif context.user_data.get("admin_action") == "edit_text":
            for q in data["questions"]:
                if q["id"] == context.user_data["edit_id"]:
                    q["text"] = text
                    break
            save_data(data)
            context.user_data.clear()
            await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
            return
        elif text in [btn for row in admin_keyboard for btn in row]:
            if text == "üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤":
                msg = "üìã –í–æ–ø—Ä–æ—Å—ã:\n\n"
                for q in data["questions"]:
                    msg += f"{q['id']}. {q['text']}\n"
                await update.message.reply_text(msg or "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
                context.user_data["admin_action"] = "add_question"
                await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
                context.user_data["admin_action"] = "delete_question"
                await update.message.reply_text("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
                context.user_data["admin_action"] = "edit_question"
                await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            elif text == "üìä –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
                msg = "üìä –û—Ç–≤–µ—Ç—ã:\n\n"
                for uid, ans in data.get("answers", {}).items():
                    msg += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}:\n"
                    for q_id, a in ans.items():
                        msg += f"  –í–æ–ø—Ä–æ—Å {q_id}: {a}\n"
                    msg += "\n"
                await update.message.reply_text(msg or "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤.")
            return

    # –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–ø—Ä–æ—Å
    if "answers" not in context.user_data:
        context.user_data["answers"] = {}

    step = context.user_data.get("step", 0)
    if step < len(data["questions"]):
        q = data["questions"][step]
        context.user_data["answers"][str(q["id"])] = text
        context.user_data["step"] += 1
        await send_question(update, context)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    app.run_polling()
