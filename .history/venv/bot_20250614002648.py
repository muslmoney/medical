import json, csv, os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

ADMIN_ID = [572979988, 103525470]
TOKEN = "7366253745:AAEGD7nh93tBAg-g70ZDXlpyRnEaT_xXLkk"
DATA_FILE = "questions.json"
EXPORT_FILE = "answers.csv"

LANGUAGES = {"–†—É—Å—Å–∫–∏–π": "ru", "O'zbek": "uz", "English": "en"}
admin_keyboard = [["üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
                  ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üì§ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
                  ["‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "üìä –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
                  ["üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"]]
cancel_keyboard = [["üîô –û—Ç–º–µ–Ω–∞"]]


def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"questions": [], "answers": {}}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [[k] for k in LANGUAGES.keys()]
    await update.message.reply_text("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = LANGUAGES.get(update.message.text)
    if not lang:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return
    context.user_data["lang"] = lang
    context.user_data["step"] = 0
    context.user_data["answers"] = {}
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    step = context.user_data.get("step", 0)
    questions = data["questions"]
    if step >= len(questions):
        data.setdefault("answers", {})[str(update.effective_user.id)] = context.user_data["answers"]
        save_data(data)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!", reply_markup=ReplyKeyboardRemove())
        return

    q = questions[step]
    context.user_data["current_question"] = q
    text = q.get(f"text_{context.user_data['lang']}", q["text"])

    if q["type"] == "choice":
        keyboard = [[opt] for opt in q["options"]] + [["–î—Ä—É–≥–æ–µ"], ["üîô –û—Ç–º–µ–Ω–∞"]]
    else:
        keyboard = [["üîô –û—Ç–º–µ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=markup)

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    data = load_data()

    if text.lower() in ["–æ—Ç–º–µ–Ω–∞", "üîô –æ—Ç–º–µ–Ω–∞", "üîô"]:
        context.user_data.clear()
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    if user_id in ADMIN_ID:
        act = context.user_data.get("admin_action")
        if act == "add_question_text":
            context.user_data["new_q_text"] = text
            context.user_data["admin_action"] = "add_question_type"
            await update.message.reply_text("üìå –¢–∏–ø: choice –∏–ª–∏ text:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            return
        elif act == "add_question_type":
            if text not in ["choice", "text"]:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ choice –∏–ª–∏ text")
                return
            context.user_data["new_q_type"] = text
            if text == "choice":
                context.user_data["admin_action"] = "add_question_options"
                await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            else:
                q = {"id": len(data["questions"]) + 1, "text": context.user_data["new_q_text"], "type": "text", "options": []}
                data["questions"].append(q)
                save_data(data)
                context.user_data.clear()
                await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
            return
        elif act == "add_question_options":
            options = list(set(o.strip() for o in text.split(",") if o.strip()))
            q = {"id": len(data["questions"]) + 1, "text": context.user_data["new_q_text"], "type": "choice", "options": options}
            data["questions"].append(q)
            save_data(data)
            context.user_data.clear()
            await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
            return
        elif act == "move_question":
            try:
                src, dest = map(int, text.split())
                if 1 <= src <= len(data["questions"]) and 1 <= dest <= len(data["questions"]):
                    item = data["questions"].pop(src - 1)
                    data["questions"].insert(dest - 1, item)
                    for i, q in enumerate(data["questions"], 1):
                        q["id"] = i
                    save_data(data)
                    await update.message.reply_text("üì§ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
                else:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.")
            except:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
            context.user_data.clear()
            return
        elif act == "delete_question":
            try:
                idx = int(text)
                if 1 <= idx <= len(data["questions"]):
                    data["questions"].pop(idx - 1)
                    for i, q in enumerate(data["questions"], 1):
                        q["id"] = i
                    save_data(data)
                    await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
                else:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            except:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            context.user_data.clear()
            return
        elif act == "edit_question":
            try:
                idx = int(text)
                if 1 <= idx <= len(data["questions"]):
                    context.user_data["edit_index"] = idx - 1
                    context.user_data["admin_action"] = "edit_question_text"
                    await update.message.reply_text("‚úèÔ∏è –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
                else:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            except:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä")
            return
        elif act == "edit_question_text":
            idx = context.user_data["edit_index"]
            data["questions"][idx]["text"] = text
            save_data(data)
            context.user_data.clear()
            await update.message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        if text == "üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤":
            msg = "\n".join([f"{q['id']}. {q['text']} ({q['type']})" for q in data["questions"]]) or "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
            await update.message.reply_text(msg)
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
            context.user_data["admin_action"] = "add_question_text"
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
        elif text == "üì§ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
            context.user_data["admin_action"] = "move_question"
            await update.message.reply_text("‚ÜïÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
        elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
            context.user_data["admin_action"] = "delete_question"
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
        elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            context.user_data["admin_action"] = "edit_question"
            await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
        elif text == "üìä –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            msg = ""
            for uid, ans in data.get("answers", {}).items():
                msg += f"üë§ {uid}:\n" + "\n".join([f"  {k}: {v}" for k, v in ans.items()]) + "\n\n"
            await update.message.reply_text(msg or "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤.")
        elif text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV":
            with open(EXPORT_FILE, "w", newline='') as f:
                writer = csv.writer(f)
                writer.writerow(["user_id"] + [q["text"] for q in data["questions"]])
                for uid, ans in data.get("answers", {}).items():
                    row = [uid] + [ans.get(str(q["id"]), "") for q in data["questions"]]
                    writer.writerow(row)
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ answers.csv")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    q = context.user_data.get("current_question")
    if not q:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    step = context.user_data.get("step", 0)

    if q["type"] == "choice" and text == "–î—Ä—É–≥–æ–µ":
        context.user_data["awaiting_other"] = True
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:")
        return

    if context.user_data.get("awaiting_other"):
        context.user_data["awaiting_other"] = False
        answer = text
    elif q["type"] == "choice" and text not in q["options"] and text != "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–µ'")
        return
    else:
        answer = text

    context.user_data["answers"][str(q["id"])] = answer
    context.user_data["step"] = step + 1
    await send_question(update, context)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel_action))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_language))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    app.run_polling()
