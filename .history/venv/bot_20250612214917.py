import json
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram import KeyboardButton

ADMIN_ID = [572979988, 103525470]
TOKEN = "7366253745:AAEGD7nh93tBAg-g70ZDXlpyRnEaT_xXLkk"
DATA_FILE = "questions.json"
LANGUAGES = ["ru", "uz", "en"]

LANG_TEXTS = {
    "choose_lang": {
        "ru": "üá∑üá∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "uz": "üá∫üáø Iltimos, tilni tanlang:",
        "en": "üá¨üáß Please choose a language:"
    },
    "thanks": {
        "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
        "uz": "‚úÖ Ishtirokingiz uchun rahmat!",
        "en": "‚úÖ Thank you for your participation!"
    },
    "other": {
        "ru": "–î—Ä—É–≥–æ–µ",
        "uz": "Boshqa",
        "en": "Other"
    },
    "cancel": {
        "ru": "üîô –û—Ç–º–µ–Ω–∞",
        "uz": "üîô Bekor qilish",
        "en": "üîô Cancel"
    },
    "enter_other": {
        "ru": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        "uz": "‚úèÔ∏è O'z variantingizni yozing:",
        "en": "‚úèÔ∏è Enter your option:"
    },
    "invalid_option": {
        "ru": "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–µ'.",
        "uz": "‚ö†Ô∏è Iltimos, mavjud variantni tanlang yoki 'Boshqa' tugmasini bosing.",
        "en": "‚ö†Ô∏è Please select a valid option or tap 'Other'."
    },
    "start_quiz": {
        "ru": "–û–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...",
        "uz": "So'rovnoma boshlanmoqda...",
        "en": "The quiz is starting..."
    },
    "press_start": {
        "ru": "‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.",
        "uz": "‚ö†Ô∏è So'rovnomani boshlash uchun /start ni bosing.",
        "en": "‚ö†Ô∏è Press /start to begin the quiz."
    },
    "cancelled": {
        "ru": "‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.",
        "uz": "‚ùå So'rovnoma bekor qilindi.",
        "en": "‚ùå The quiz has been cancelled."
    },
    "action_cancelled": {
        "ru": "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "uz": "‚ùå Harakat bekor qilindi.",
        "en": "‚ùå Action cancelled."
    }
}

    if "lang" not in context.user_data:
        if text.startswith("–†—É—Å—Å–∫–∏–π"):
            context.user_data["lang"] = "ru"
        elif text.startswith("O‚Äòzbekcha"):
            context.user_data["lang"] = "uz"
        elif text.startswith("English"):
            context.user_data["lang"] = "en"
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.")
            return
        await update.message.reply_text(LANG_TEXTS["start_quiz"][context.user_data["lang"]], reply_markup=ReplyKeyboardRemove())
        await send_question(update, context)
        return

admin_keyboard = [
    ["üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
    ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üì§ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
    ["‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "üìä –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
]

cancel_keyboard = [["üîô –û—Ç–º–µ–Ω–∞"]]

def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["step"] = 0
    context.user_data["answers"] = {}

    keyboard = [[KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫")], [KeyboardButton("O‚Äòzbekcha üá∫üáø")], [KeyboardButton("English üá¨üáß")]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(LANG_TEXTS["choose_lang"]["ru"], reply_markup=markup)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    step = context.user_data.get("step", 0)
    if step >= len(data["questions"]):
        data.setdefault("answers", {})[str(update.effective_user.id)] = context.user_data["answers"]
        save_data(data)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!", reply_markup=ReplyKeyboardRemove())
        return

    q = data["questions"][step]
    context.user_data["current_question"] = q

    if q["type"] == "choice":
        keyboard = [[opt] for opt in q["options"]] + [["–î—Ä—É–≥–æ–µ"], ["üîô –û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    else:
        markup = ReplyKeyboardMarkup([["üîô –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

    await update.message.reply_text(q["text"], reply_markup=markup)

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if text.lower() in ["–æ—Ç–º–µ–Ω–∞", "üîô –æ—Ç–º–µ–Ω–∞", "üîô"]:
        context.user_data.clear()
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    data = load_data()

    if user_id in ADMIN_ID:
        if context.user_data.get("admin_action") == "add_question_text":
            context.user_data["new_q_text"] = text
            context.user_data["admin_action"] = "add_question_type"
            await update.message.reply_text("üìå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: choice (–≤–∞—Ä–∏–∞–Ω—Ç—ã) –∏–ª–∏ text (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥):", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            return
        elif context.user_data.get("admin_action") == "add_question_type":
            if text not in ["choice", "text"]:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ª–∏–±–æ choice, –ª–∏–±–æ text.")
                return
            context.user_data["new_q_type"] = text
            if text == "choice":
                context.user_data["admin_action"] = "add_question_options"
                await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            else:
                q = {
                    "id": len(data["questions"]) + 1,
                    "text": context.user_data["new_q_text"],
                    "type": "text",
                    "options": []
                }
                data["questions"].append(q)
                save_data(data)
                context.user_data.clear()
                await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
            return
        elif context.user_data.get("admin_action") == "add_question_options":
            options = [o.strip() for o in text.split(",") if o.strip()]
            q = {
                "id": len(data["questions"]) + 1,
                "text": context.user_data["new_q_text"],
                "type": "choice",
                "options": options
            }
            data["questions"].append(q)
            save_data(data)
            context.user_data.clear()
            await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
            return
        elif context.user_data.get("admin_action") == "move_question":
            try:
                parts = list(map(int, text.split()))
                if len(parts) == 2:
                    src, dest = parts
                    questions = data["questions"]
                    if 1 <= src <= len(questions) and 1 <= dest <= len(questions):
                        item = questions.pop(src - 1)
                        questions.insert(dest - 1, item)
                        for i, q in enumerate(questions, start=1):
                            q["id"] = i
                        save_data(data)
                        await update.message.reply_text("üì§ –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–º–µ—â—ë–Ω.", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))
                    else:
                        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.")
                else:
                    await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            except:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.")
            context.user_data.clear()
            return
        elif text in [btn for row in admin_keyboard for btn in row]:
            if text == "üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤":
                msg = "üìã –í–æ–ø—Ä–æ—Å—ã:\n\n"
                for q in data["questions"]:
                    msg += f"{q['id']}. {q['text']} ({q['type']})\n"
                await update.message.reply_text(msg or "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
                context.user_data["admin_action"] = "add_question_text"
                await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            elif text == "üì§ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
                context.user_data["admin_action"] = "move_question"
                await update.message.reply_text("‚ÜïÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –Ω–æ–º–µ—Ä–∞ (–æ—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞), —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:", reply_markup=ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True))
            elif text == "üìä –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
                msg = "üìä –û—Ç–≤–µ—Ç—ã:\n\n"
                for uid, ans in data.get("answers", {}).items():
                    msg += f"üë§ {uid}:\n"
                    for qid, val in ans.items():
                        msg += f"  {qid}: {val}\n"
                    msg += "\n"
                await update.message.reply_text(msg or "–û—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç.")
            return

    # –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    q = context.user_data.get("current_question")
    if not q:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.")
        return

    step = context.user_data.get("step", 0)

    if q["type"] == "choice" and text == "–î—Ä—É–≥–æ–µ":
        context.user_data["awaiting_other"] = True
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:")
        return

    if context.user_data.get("awaiting_other"):
        context.user_data["awaiting_other"] = False
        answer = text
    elif q["type"] == "choice" and text not in q["options"] and text != "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–µ'.")
        return
    else:
        answer = text

    context.user_data["answers"][str(q["id"])] = answer
    context.user_data["step"] = step + 1
    await send_question(update, context)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel_action))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    app.run_polling()
