import json
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

ADMIN_ID = [572979988, 103525470]
TOKEN = "7366253745:AAEGD7nh93tBAg-g70ZDXlpyRnEaT_xXLkk"
DATA_FILE = "questions.json"
ANSWERS_FILE = "answers.json"

LANGUAGES = {
    "–†—É—Å—Å–∫–∏–π": "ru",
    "O'zbekcha": "uz",
    "English": "en"
}

TEXTS = {
    "thank_you": {
        "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\nüîÑ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ?",
        "uz": "‚úÖ Ishtirokingiz uchun rahmat!\n\nüîÑ So‚Äòrovnomani qayta boshlaysizmi?",
        "en": "‚úÖ Thank you for participating!\n\nüîÑ Want to start again?"
    },
    "choose_lang": {
        "ru": "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "uz": "üåê Tilni tanlang:",
        "en": "üåê Choose your language:"
    },
    "cancelled": {
        "ru": "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "uz": "‚ùå Amaliyot bekor qilindi.",
        "en": "‚ùå Action cancelled."
    },
    "select_from_buttons": {
        "ru": "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–∫–∏.",
        "uz": "‚ö†Ô∏è Tugmalardan birini tanlang.",
        "en": "‚ö†Ô∏è Please choose from the buttons."
    },
    "enter_custom": {
        "ru": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        "uz": "‚úçÔ∏è O'z variantingizni kiriting:",
        "en": "‚úçÔ∏è Enter your own option:"
    },
    "use_start": {
        "ru": "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        "uz": "‚ö†Ô∏è Boshlash uchun /start ni bosing.",
        "en": "‚ö†Ô∏è Use /start to begin."
    },
    "invalid_lang": {
        "ru": "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.",
        "uz": "‚ö†Ô∏è Iltimos, tilni tugma orqali tanlang.",
        "en": "‚ö†Ô∏è Please select a language using the button."
    }
}

BUTTONS = {
    "cancel": {
        "ru": "üîô –û—Ç–º–µ–Ω–∞",
        "uz": "üîô Bekor qilish",
        "en": "üîô Cancel"
    },
    "other": {
        "ru": "–î—Ä—É–≥–æ–µ",
        "uz": "Boshqa",
        "en": "Other"
    },
    "restart": {
        "ru": "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        "uz": "üîÑ Qaytadan boshlash",
        "en": "üîÑ Restart"
    }
}

admin_keyboard = [
    ["üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
    ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üì§ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
    ["‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "üìä –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
]

def load_data():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def save_user_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    try:
        with open(ANSWERS_FILE, "r", encoding="utf-8") as f:
            all_answers = json.load(f)
    except FileNotFoundError:
        all_answers = {}

    all_answers[user_id] = {
        "timestamp": datetime.now().isoformat(),
        "responses": context.user_data["answers"]
    }

    with open(ANSWERS_FILE, "w", encoding="utf-8") as f:
        json.dump(all_answers, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    buttons = [[lang] for lang in LANGUAGES]
    await update.message.reply_text(TEXTS["choose_lang"]["ru"], reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    context.user_data["step"] = -1

async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = LANGUAGES.get(update.message.text.strip())
    if not lang:
        await update.message.reply_text(TEXTS["invalid_lang"]["ru"])
        return
    context.user_data["lang"] = lang
    context.user_data["step"] = 0
    context.user_data["answers"] = {}
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    step = context.user_data.get("step", 0)
    lang = context.user_data.get("lang", "ru")

    if step >= len(data["questions"]):
        save_user_answers(update, context)
        restart_btn = BUTTONS["restart"][lang]
        keyboard = [[restart_btn]]
        await update.message.reply_text(TEXTS["thank_you"][lang], reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        context.user_data.clear()
        return

    q = data["questions"][step]
    context.user_data["current_question"] = q
    text = q["text"].get(lang, q["text"].get("ru", "‚ùì"))
    cancel_btn = BUTTONS["cancel"].get(lang, "üîô –û—Ç–º–µ–Ω–∞")
    other_btn = BUTTONS["other"].get(lang, "–î—Ä—É–≥–æ–µ")

    if q["type"] == "choice":
        options = q.get("options", {}).get(lang, [])
        keyboard = [[opt] for opt in options] + [[other_btn], [cancel_btn]]
    else:
        keyboard = [[cancel_btn]]

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=markup)

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    context.user_data.clear()
    await update.message.reply_text(TEXTS["cancelled"][lang], reply_markup=ReplyKeyboardRemove())

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = str(update.effective_user.id)

    # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    if any(text == BUTTONS["restart"][code] for code in LANGUAGES.values()):
        await start(update, context)
        return

    data = load_data()
    lang = context.user_data.get("lang", "ru")

    if text.lower() in ["üîô", "–æ—Ç–º–µ–Ω–∞", "üîô –æ—Ç–º–µ–Ω–∞", BUTTONS["cancel"][lang].lower()]:
        await cancel_action(update, context)
        return

    if context.user_data.get("step") == -1:
        await handle_language_selection(update, context)
        return

    if user_id in map(str, ADMIN_ID):
        # [–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Äî –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ, –æ—Å—Ç–∞–≤—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
        pass  # –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, —É —Ç–µ–±—è —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

    q = context.user_data.get("current_question")
    if not q:
        await update.message.reply_text(TEXTS["use_start"][lang])
        return

    if q["type"] == "choice":
        options = q.get("options", {}).get(lang, [])
        if text == BUTTONS["other"].get(lang, "–î—Ä—É–≥–æ–µ"):
            context.user_data["awaiting_other"] = True
            await update.message.reply_text(TEXTS["enter_custom"][lang])
            return
        if context.user_data.get("awaiting_other"):
            answer = text
            context.user_data["awaiting_other"] = False
        elif text not in options:
            await update.message.reply_text(TEXTS["select_from_buttons"][lang])
            return
        else:
            answer = text
    else:
        answer = text

    context.user_data["answers"][str(q["id"])] = answer
    context.user_data["step"] += 1
    await send_question(update, context)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True))

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel_action))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    app.run_polling()
